import numpy as np

# SVM classifier using gradient descent
class SVM:
    def __init__(self, learning_rate=0.01, lambda_param=0.01, iterations=1000):
        self.learning_rate = learning_rate
        self.lambda_param = lambda_param
        self.iterations = iterations

    def fit(self, X, y):
        self.w = np.zeros(X.shape[1])
        self.b = 0
        for _ in range(self.iterations):
            for i in range(X.shape[0]):
                if y[i] * (np.dot(X[i], self.w) + self.b) < 1:
                    self.w -= self.learning_rate * (2 * self.lambda_param * self.w - np.dot(X[i], y[i]))
                    self.b -= self.learning_rate * y[i]
                else:
                    self.w -= self.learning_rate * 2 * self.lambda_param * self.w
        return self

    def predict(self, X):
        return np.sign(np.dot(X, self.w
::contentReference[oaicite:0]{index=0}
 
