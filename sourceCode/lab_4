import numpy as np

# Sigmoid function
def sigmoid(z):
    return 1 / (1 + np.exp(-z))

# Prepare data
X = df[['feature1', 'feature2']].values
y = df['target'].values.reshape(-1, 1)

# Add intercept term
X_b = np.c_[np.ones((X.shape[0], 1)), X]

# Initialize parameters
theta = np.zeros((X_b.shape[1], 1))
learning_rate = 0.01
iterations = 1000

# Gradient Descent
for i in range(iterations):
    gradients = X_b.T.dot(sigmoid(X_b.dot(theta)) - y) / X_b.shape[0]
    theta -= learning_rate * gradients

# Make predictions
predictions = sigmoid(X_b.dot(theta)) >= 0.5
