import numpy as np
from collections import Counter

# Euclidean distance function
def euclidean_distance(x1, x2):
    return np.sqrt(np.sum((x1 - x2) ** 2))

# KNN classifier
def knn(X_train, y_train, X_test, k=3):
    predictions = []
    for x_test in X_test:
        distances = [euclidean_distance(x_test, x_train) for x_train in X_train]
        k_indices = np.argsort(distances)[:k]
        k_nearest_labels = [y_train[i] for i in k_indices]
        most_common = Counter(k_nearest_labels).most_common(1)
        predictions.append(most_common[0][0])
    return predictions

# Prepare data
X_train = df[['feature1', 'feature2']].values
y_train = df['target'].values
X_test = np.array([[value1, value2], [value3, value4]])

# Make predictions
predictions = knn(X_train, y_train, X_test)
